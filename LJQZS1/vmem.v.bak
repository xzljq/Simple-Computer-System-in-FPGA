module vmem(
	input  [31:0] addr,
	output reg [31:0] dataout,
	input  [31:0] datain,
	input  rdclk,
	input  wrclk,
	input [2:0] memop,
	input we
	
	);

wire [31:0] block;
reg [31:0] RAM [7:0];
reg [31:0] temp;

assign block = addr >> 2;

assign num0 = RAM[0][3:0];
assign num1 = RAM[1][3:0];
assign num2 = RAM[1][7:4];
assign num3 = RAM[1][11:8];
assign num4 = RAM[1][15:12];
assign num5 = RAM[1][19:16];

initial begin
	$readmemh("data.txt", RAM, 0, 7);
end

always @ (posedge wrclk) begin
	if(we) begin
		case(memop)
			3'b000 : begin
				case(addr[1:0])
					2'b00 : RAM[block][7:0] <= datain[7:0];
					2'b01 : RAM[block][15:8] <= datain[7:0];
					2'b10 : RAM[block][23:16] <= datain[7:0];
					2'b11 : RAM[block][31:24] <= datain[7:0];
				endcase
			end

			3'b001 : begin
				if(addr[1]) RAM[block][31:16] <= datain[15:0];
				else RAM[block][15:0] <= datain[15:0];
			end

			3'b010 : begin
				RAM[block] <= datain;
			end
		endcase
	end
end


always @ (posedge rdclk) begin
	case (memop)
		3'b000 : begin
			case (addr[1:0])
				2'b00 : temp = RAM[block][7:0];
				2'b01 : temp = RAM[block][15:8];
				2'b10 : temp = RAM[block][23:16];
				2'b11 : temp = RAM[block][31:24];
			endcase
			dataout = {{24{temp[7]}},  temp[7:0]};
		end

		3'b001 : begin
			if(addr[1]) temp = RAM[block][31:16];
			else temp = RAM[block][15:0];
			dataout = {{16{temp[15]}},  temp[15:0]};
		end

		3'b010 : begin
			dataout = RAM[block];
		end

		3'b100 : begin
			case (addr[1:0])
				2'b00 : dataout <= RAM[block][7:0];
				2'b01 : dataout <= RAM[block][15:8];
				2'b10 : dataout <= RAM[block][23:16];
				2'b11 : dataout <= RAM[block][31:24];
			endcase
		end

		3'b101 : begin
			if(addr[1]) dataout <= RAM[block][31:16];
			else dataout <= RAM[block][15:0];
		end
	endcase
end

endmodule	
	
/*
//data_mem (	byteena_a,	data,	rdaddress,	rdclock,	wraddress,	wrclock,	wren,	q);
reg [3:0] byte_a;
wire [31:0] q;
reg [31:0] temp;
data_mem my_data_mem(byte_a, datain, addr[17:0], rdclk, addr[17:0], ~wrclk, we, q);
initial begin
	byte_a <= 4'b0;
end
always@(*) begin
	case(memop)
			3'b000 : begin
				byte_a[addr[1:0]] <= 1'b1;
			end

			3'b001 : begin
				if(addr[1]) byte_a <= 4'b1100;
				else byte_a <= 4'b0011;
			end

			3'b010 : begin
				byte_a <= 4'b1111;
			end
			default: byte_a <= 4'b0;
	endcase
		
	case (memop)
		3'b000 : begin
			case (addr[1:0])
				2'b00 : temp = q[7:0];
				2'b01 : temp = q[15:8];
				2'b10 : temp = q[23:16];
				2'b11 : temp = q[31:24];
			endcase
			dataout = {{24{temp[7]}},  temp[7:0]};
		end

		3'b001 : begin
			if(addr[1]) temp = q[31:16];
			else temp = q[15:0];
			dataout = {{16{temp[15]}},  temp[15:0]};
		end

		3'b010 : begin
			dataout = q;
		end

		3'b100 : begin
			case (addr[1:0])
				2'b00 : dataout <= q[7:0];
				2'b01 : dataout <= q[15:8];
				2'b10 : dataout <= q[23:16];
				2'b11 : dataout <= q[31:24];
			endcase
		end

		3'b101 : begin
			if(addr[1]) dataout <= q[31:16];
			else dataout <= q[15:0];
		end
	endcase
end

//caution!!!	it is probably wrong when prove it in practice!!
/*wire [31:0] out1, out2;
assign num0 = out1[3:0];
assign num1 = out2[3:0];
assign num2 = out2[7:4];
assign num3 = out2[11:8];
assign num4 = out2[15:12];
assign num5 = out2[19:16];
//caution!!! multiple read
data_mem my_data_mem2(4'b0000, 32'd0, 18'd0, rdclk, 18'd0, 0, 0, out1);
data_mem my_data_mem3(4'b0000, 32'd0, 18'd4, rdclk, 18'd0, 0, 0, out2);
*/



